/*
 * This file is generated by jOOQ.
 */
package superservice.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import superservice.db.DefaultSchema;
import superservice.db.Keys;
import superservice.db.tables.records.UploadsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Uploads extends TableImpl<UploadsRecord> {

    private static final long serialVersionUID = -76559049;

    /**
     * The reference instance of <code>uploads</code>
     */
    public static final Uploads UPLOADS = new Uploads();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UploadsRecord> getRecordType() {
        return UploadsRecord.class;
    }

    /**
     * The column <code>uploads.id</code>.
     */
    public final TableField<UploadsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>uploads.user_id</code>.
     */
    public final TableField<UploadsRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>uploads.payload_md5</code>.
     */
    public final TableField<UploadsRecord, String> PAYLOAD_MD5 = createField("payload_md5", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>uploads</code> table reference
     */
    public Uploads() {
        this(DSL.name("uploads"), null);
    }

    /**
     * Create an aliased <code>uploads</code> table reference
     */
    public Uploads(String alias) {
        this(DSL.name(alias), UPLOADS);
    }

    /**
     * Create an aliased <code>uploads</code> table reference
     */
    public Uploads(Name alias) {
        this(alias, UPLOADS);
    }

    private Uploads(Name alias, Table<UploadsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Uploads(Name alias, Table<UploadsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Uploads(Table<O> child, ForeignKey<O, UploadsRecord> key) {
        super(child, key, UPLOADS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UploadsRecord> getPrimaryKey() {
        return Keys.PK_UPLOADS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UploadsRecord>> getKeys() {
        return Arrays.<UniqueKey<UploadsRecord>>asList(Keys.PK_UPLOADS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Uploads as(String alias) {
        return new Uploads(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Uploads as(Name alias) {
        return new Uploads(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Uploads rename(String name) {
        return new Uploads(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Uploads rename(Name name) {
        return new Uploads(name, null);
    }
}
